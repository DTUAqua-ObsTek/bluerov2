<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!--
    Vehicle's parameters (remember to enter the model parameters below)
  -->
  <!-- Mass -->
  <xacro:property name="mass" value="11.2"/>
  <!-- Describing the dimensions of the vehicle's bounding box: width, length, height -->
  <xacro:property name="x_size" value="0.448"/>
  <xacro:property name="y_size" value="0.2384"/>
  <xacro:property name="z_size" value="0.28066"/>
  <!-- minion_usv_height is not really! It's just for run... We need first calculate the Fossen parameters -->
  <!-- Volume -->
  <xacro:property name="volume" value="0.011054"/>
  <!-- Center of gravity -->
  <xacro:property name="cog" value="0 0 0"/>
  <!--
  Center of buoyancy according to eq. (3.1) p. 28 in Berg2012.
  The original values, [0.0822, -0.00773, 0.3872] however, seem to
  assume NWU (otherwise cob is below cog?). 0.155
  -->
  <xacro:property name="cob" value="0 0 0.3872"/>
  <!-- Fluid density -->
  <xacro:property name="rho" value="1028"/>
  <!--
    Visual mesh file for the vehicle, usually in DAE (Collada) format. Be sure to store the
    mesh with the origin of the mesh on the same position of the center of mass, otherwise
    the mesh pose will have to be corrected below in the <visual> block.
    Open the meshes for the RexROV vehicle in Blender to see an example on the mesh placement.
  -->
  <xacro:property name="visual_mesh_file" value="file://$(find bluerov2_description)/meshes/bluerov2_noprop.dae"/>

  <!-- Collision geometry mesh, usually in STL format (it is recommended to keep
  this geometry as simple as possible to improve the performance the physics engine
  regarding the computation of collision forces) -->
  <xacro:property name="collision_mesh_file" value="file://$(find bluerov2_description)/meshes/bluerov2_noprop.stl"/>

  <!-- Vehicle macro -->
  <xacro:macro name="bluerov2_base" params="namespace">
      <!-- Mass -->
      <xacro:property name="mass" value="11.2"/>
      <!-- Describing the dimensions of the vehicle's bounding box: width, length, height -->
      <xacro:property name="x_size" value="0.448"/>
      <xacro:property name="y_size" value="0.2384"/>
      <xacro:property name="z_size" value="0.28066"/>
      <!-- minion_usv_height is not really! It's just for run... We need first calculate the Fossen parameters -->
      <!-- Volume -->
      <xacro:property name="volume" value="0.011054"/>
      <!-- Center of gravity -->
      <xacro:property name="cog" value="0 0 0"/>

      <!-- Rigid body description of the base link -->
      <link name="${namespace}/base_link">

        <visual>
          <origin xyz="-0.1 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${visual_mesh_file}" scale="1 1 1" />
          </geometry>
        </visual>

        <!-- In rexrov2_base they made collision planes to minize the GPU load -->
        <collision>
          <origin xyz="-0.1 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${collision_mesh_file}" scale="1 1 1" />
          </geometry>
        </collision>

      </link>

      <link name="${namespace}/base_link_frd"/>

      <link name="${namespace}/base_link_inertial">
          <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->
        <inertial>
          <mass value="${mass}" />
          <origin xyz="${cog}" rpy="0 0 0"/>
          <!-- <inertia ixx="525.39" ixy="1.44" ixz="33.41" iyy="794.20" iyz="2.6" izz="691.23"/> -->
          <inertia
            ixx="${0.2*mass*y_size*y_size + 0.2*mass*z_size*z_size}" ixy="0.0" ixz="0.0"
            iyy="${0.2*mass*x_size*x_size + 0.2*mass*z_size*z_size}" iyz="0.0"
            izz="${0.2*mass*x_size*x_size + 0.2*mass*y_size*y_size}" />
        </inertial>
      </link>

      <joint name="${namespace}/base_link_${namespace}/base_link_inertial" type="fixed">
          <origin xyz="0 0 0" rpy="0 0 0" />
          <parent link="${namespace}/base_link"/>
          <child link="${namespace}/base_link_inertial"/>
      </joint>

      <joint name="${namespace}/base_link_${namespace}/base_link_frd" type="fixed">
          <origin xyz="0 0 0" rpy="${pi} 0 0" />
          <parent link="${namespace}/base_link"/>
          <child link="${namespace}/base_link_frd"/>
      </joint>

  </xacro:macro>
</robot>
